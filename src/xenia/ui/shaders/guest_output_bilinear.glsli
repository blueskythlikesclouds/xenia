// At least #version 420.

#if XE_GUEST_OUTPUT_DITHER
  #include "dither_8bpc.xesli"
#endif  // XE_GUEST_OUTPUT_DITHER

layout(push_constant) uniform XeBilinearConstants {
  // 16 occupied by the vertex shader.
  layout(offset = 16) ivec2 xe_bilinear_output_offset;
  layout(offset = 24) vec2 xe_bilinear_output_size_inv;
};

layout(set = 0, binding = 0) uniform sampler2D xe_texture;

layout(location = 0) out vec4 xe_frag_color;

void main() {
  uvec2 pixel_coord = uvec2(ivec2(gl_FragCoord.xy) - xe_bilinear_output_offset);
  // + 0.5 so the origin is at the pixel center, and at 1:1 the original pixel
  // is taken.
  // Interpolating the four colors in the perceptual space because doing it in
  // linear space causes, in particular, bright text on a dark background to
  // become too thick, and aliasing of bright parts on top of dark areas to be
  // too apparent (4D5307E6 HUD, for example, mainly the edges of the
  // multiplayer score bars).
  xe_frag_color.rgb =
      textureLod(xe_texture,
                 (vec2(pixel_coord) + 0.5) * xe_bilinear_output_size_inv,
                 0.0).rgb;
  #if XE_GUEST_OUTPUT_DITHER
    // Clamping because on Vulkan, the surface may specify any format, including
    // floating-point.
    xe_frag_color.rgb =
        clamp(xe_frag_color.rgb + XeDitherOffset8bpc(pixel_coord),
              vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));
  #endif  // XE_GUEST_OUTPUT_DITHER
  xe_frag_color.a = 1.0;
}
